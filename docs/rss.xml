<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Paimon's blog</title><link>https://paimonlee.github.io/paimon.github.io</link><description>Life is a fucking movie!人生如戲啊，靚仔！</description><copyright>Paimon's blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/38132146</url><title>avatar</title><link>https://paimonlee.github.io/paimon.github.io</link></image><lastBuildDate>Sat, 22 Jun 2024 14:48:47 +0000</lastBuildDate><managingEditor>Paimon's blog</managingEditor><ttl>60</ttl><webMaster>Paimon's blog</webMaster><item><title>位运算实现加减乘除</title><link>https://paimonlee.github.io/paimon.github.io/post/wei-yun-suan-shi-xian-jia-jian-cheng-chu.html</link><description># 位运算实现加减乘除&#13;
## 加法&#13;
&#13;
```&#13;
4 + 5&#13;
0000 0100 + 0000 0101&#13;
&#13;
第一步，异或，如果不考虑进位，异或就可以直接出结果&#13;
0000 0100&#13;
0000 0101&#13;
--------------&#13;
0000 0001&#13;
&#13;
第二步，与运算（判断进位，如果与运算位0，则没有进位）&#13;
0000 0100&#13;
0000 0101&#13;
--------------&#13;
0000 0100&#13;
&#13;
第三步，将与运算的结果左移一位，0000 1000&#13;
&#13;
第四步，异或 将第一步和第三步的结果进行异或运算&#13;
0000 0001&#13;
0000 1000&#13;
------------------&#13;
0000 1001&#13;
&#13;
第五步，验算，将第一步和第三步的结果进行与运算，如果为0，&#13;
则第四步则为最终结果，如果不为0，则有进位，则与第四步结果异或&#13;
0000 0001&#13;
0000 1000&#13;
------------------&#13;
0000 0000&#13;
```&#13;
&#13;
伪代码&#13;
```&#13;
def add(a, b):&#13;
    c = a ^ b&#13;
    d = a &amp; b&#13;
    if d == 0:&#13;
        # 没有进位，直接返回结果&#13;
        return c&#13;
    else:&#13;
        d = d &lt;&lt; 1&#13;
        add(c, d)&#13;
```&#13;
&#13;
## 减法&#13;
4 - 5 = 4 + (-5)&#13;
0000 0100 + 1111 1011 (计算机中负数存储的是补码)&#13;
。</description><guid isPermaLink="true">https://paimonlee.github.io/paimon.github.io/post/wei-yun-suan-shi-xian-jia-jian-cheng-chu.html</guid><pubDate>Sat, 22 Jun 2024 14:48:26 +0000</pubDate></item><item><title>位运算</title><link>https://paimonlee.github.io/paimon.github.io/post/wei-yun-suan.html</link><description># 位运算&#13;
&#13;
## 与、或、异或、非&#13;
&#13;
### 与运算（and &amp;）&#13;
&#13;
```&#13;
1 0 1 1  1 1 0 0&#13;
0 1 1 1  0 0 0 0&#13;
                    and&#13;
-------------------------&#13;
0 0 1 1  0 0 0 0&#13;
```&#13;
&#13;
&#13;
### 或运算（or |）&#13;
```&#13;
1 0 1 1  1 1 0 0&#13;
0 1 1 1  0 0 0 0&#13;
                    or&#13;
-------------------------&#13;
1 1 1 1  1 1 0 0&#13;
```&#13;
&#13;
### 异或运算（xor ^）&#13;
&#13;
```&#13;
1 0 1 1  1 1 0 0&#13;
0 1 1 1  0 0 0 0&#13;
                    or&#13;
-------------------------&#13;
1 1 0 0  1 1 0 0&#13;
```&#13;
&#13;
### 非运算（单目运算符 not ~）&#13;
```&#13;
1 0 1 1  1 1 0 0&#13;
                    not&#13;
-------------------------&#13;
0 1 0 0  0 0 1 1&#13;
```&#13;
&#13;
## 位运算（移动位）&#13;
&#13;
### 左移（&lt;&lt;）&#13;
&#13;
```&#13;
0000 0001 所有二进制位全部向左移动若干位，高位丢弃，低位补零&#13;
0000 0010 &#13;
```&#13;
&#13;
### 右移（&gt;&gt;）&#13;
```&#13;
0000 0010 所有二进制位全部向右移动若干位，高位补零(或一，由符号位决定)，低位丢弃&#13;
0000 0001&#13;
```。</description><guid isPermaLink="true">https://paimonlee.github.io/paimon.github.io/post/wei-yun-suan.html</guid><pubDate>Sat, 22 Jun 2024 09:43:37 +0000</pubDate></item><item><title>原码、反码和补码</title><link>https://paimonlee.github.io/paimon.github.io/post/yuan-ma-%E3%80%81-fan-ma-he-bu-ma.html</link><description>原码：最高位符号位，其余对齐本身值即可&#13;
&#13;
反码（反码，反的是原码）：&#13;
    * 正数：反码和原码一致&#13;
    * 负数：符号位为1，其余位对原码取反&#13;
&#13;
补码（补码，补的就是反码）：&#13;
    * 正数：补码和原码一致&#13;
    * 负数：符号位为1，其余位反码+1&#13;
&#13;
```&#13;
7&#13;
原码：0 0 0 0  0 1 1 1&#13;
反码：0 0 0 0  0 1 1 1&#13;
补码：0 0 0 0  0 1 1 1&#13;
&#13;
-7&#13;
原码：1 0 0 0  0 1 1 1&#13;
反码：1 1 1 1  1 0 0 0 &#13;
补码：1 1 1 1  1 0 0 1&#13;
```。</description><guid isPermaLink="true">https://paimonlee.github.io/paimon.github.io/post/yuan-ma-%E3%80%81-fan-ma-he-bu-ma.html</guid><pubDate>Sat, 22 Jun 2024 07:36:24 +0000</pubDate></item><item><title>【Python】协程</title><link>https://paimonlee.github.io/paimon.github.io/post/%E3%80%90Python%E3%80%91-xie-cheng.html</link><description># 关键字&#13;
&#13;
async、await、asyncio&#13;
&#13;
# 运行一个协程&#13;
&#13;
```python&#13;
import asyncio&#13;
&#13;
async def main():&#13;
    print('hello')&#13;
    await asyncio.sleep(1)&#13;
    print('world')&#13;
&#13;
asyncio.run(main())&#13;
```&#13;
&#13;
要实际运行一个协程，asyncio 提供了一下几种机制：&#13;
&#13;
- asyncio.run()函数用来运行最高层级的入口点'main()'函数&#13;
  &#13;
- 对协程执行await。</description><guid isPermaLink="true">https://paimonlee.github.io/paimon.github.io/post/%E3%80%90Python%E3%80%91-xie-cheng.html</guid><pubDate>Thu, 20 Jun 2024 14:00:10 +0000</pubDate></item><item><title>【Git】stash</title><link>https://paimonlee.github.io/paimon.github.io/post/%E3%80%90Git%E3%80%91stash.html</link><description># 隐藏指定文件&#13;
一般情况下，暂时隐藏修改的命令是&#13;
```shell&#13;
# 使用上一个commit的信息&#13;
git stash&#13;
# 使用指定信息&#13;
git stash -m 'This is a message'&#13;
```&#13;
&#13;
git stash支持隐藏指定文件，在隐藏指定文件时，不能省略push参数，必须使用完整的命令&#13;
```shell&#13;
git stash push **/*.java&#13;
git stash push -m 'This is a message' **/*.java&#13;
```&#13;
&#13;
# 使用指定的隐藏记录&#13;
一般情况下使用指定的隐藏记录命令是&#13;
```shell&#13;
git stash pop [index]&#13;
```&#13;
&#13;
在没有冲突的情况下，这个命令会把隐藏给删除。</description><guid isPermaLink="true">https://paimonlee.github.io/paimon.github.io/post/%E3%80%90Git%E3%80%91stash.html</guid><pubDate>Thu, 20 Jun 2024 07:42:49 +0000</pubDate></item><item><title>协程</title><link>https://paimonlee.github.io/paimon.github.io/post/xie-cheng.html</link><description># 关键词&#13;
&#13;
coroutine、yield、next、send&#13;
&#13;
# 协程（coroutine）&#13;
&#13;
协作式多任务的子程序，允许执行被挂起与被恢复。</description><guid isPermaLink="true">https://paimonlee.github.io/paimon.github.io/post/xie-cheng.html</guid><pubDate>Thu, 20 Jun 2024 03:59:38 +0000</pubDate></item></channel></rss>